#######################################################
#     PD Controller for a single pushpuppet segment
#######################################################
# This controller uses Della Santina's singularity-free parametrization of a PCC segment,
# along with a barrier function from Incremental Potential Contact to simulate contact
# (please note that, unlike in IPC, this contact is "non-physical").
# Paramters:
# (q = configuration, dq = velocity, qd = desired configuration, dqd = desired velocity, ddqd = desired acceleration, 
# d = radius from center to cable, hp = thickness of plastic plates, m = mass of a single plate, L0 = initial heigh, 
# kb = bending stiffness, ks = axial stiffness, bb = bending damping, bs = axial damping, e = contact threshold, 
# Kp = proportional gain, KD = derivative gain)

# Please note that in this program, the configuration is in terms of ∆x, ∆y, and δL, *not* the typical PCC variables. 
# Conversions are as follows:
# ∆x = θ*d*cos(ϕ), ∆y = θ*d*sin(ϕ) where d is the radius of the segment

import numpy as np
from numpy import log, exp
from math import sqrt, sin, cos

def puppet_controller(q, dq, qd, dqd, ddqd, d, hp, m, L0, kb = 1, ks = 1, bb = 1, bs = 1, e = 1/1000, Kpb = 1, Kps=10, KD = 0.5, kc=10000):
    dx = q[0][0]
    dy = q[1][0]
    dL = q[2][0]

    kc = 1/e/kc
    I = [1/2*m*d**2, 1/2*m*d**2, 1/12*m*(3*d**2 + hp**2)]
    M = np.zeros([3,3])
    C = np.zeros([3,3])
    G = np.zeros([3,1])
    for i in range(1,4):
        [Mi, Ci, Gi] = mass(np.array([dx/3*i, dy/3*i, dL/3*i]).reshape(-1,1),dq,m,I,L0/3*i,d)
        Gi = Gi.reshape((Gi.shape[0], 1))
        M = M + Mi
        C = C + Ci
        G = G + Gi*m*9.81

    K = np.diag([kb,kb,ks])
    D = np.diag([bb,bb,bs])

    delta = np.sqrt(dx**2+dy**2)
    c = (L0+dL)/3 - d*np.sin(delta/d)

    Dq = delta - sin(delta)
    L = dL + L0
    if dx < 10e-6 and dy < 10e-6:
        Fcu = 0
        Fcv = 0
        if c < e and c > 0:
            Fch = - 2 * log(1+exp(-kc * c)) * exp(-kc * c) / (kc * exp(-kc * c)) * 1/3
        elif c < 0:
            Fch = -0.6931/kc * c * 1/3
        else:
            Fch = 0
        Aq = np.array([[0, -1, 0], [1, 0, 0], [0, 0, 1]])
    else:
        if c < e and c > 0:
            Fcu = - 2 * log(1+exp(-kc * c)) * exp(-kc * c) / (kc * exp(-kc * c)) * (- dx / delta * cos(delta/d))
            Fcv = - 2 * log(1+exp(-kc * c)) * exp(-kc * c) / (kc * exp(-kc * c)) * (- dy / delta * cos(delta/d))
            Fch = - 2 * log(1+exp(-kc * c)) * exp(-kc * c) / (kc * exp(-kc * c)) * 1/3
        elif c < 0:
            Fcu = -0.6931/kc * c * (- dx / delta * cos(delta/d))
            Fcv = -0.6931/kc * c * (- dy / delta * cos(delta/d))
            Fch = -0.6931/kc * c * 1/3
        else:
            Fcu = 0
            Fcv = 0
            Fch = 0
   
        Aq = np.array([[dx * dy * Dq / delta**3, (- dx**2 * delta - dy**2 * sin(delta)) / delta**3, dx * Dq * L / delta**3],
    [(dy**2 * delta + dx**2 * sin(delta)) / delta**3, - dx * dy * Dq / delta**3, dy * Dq * L / delta**3],
    [0, 0, sin(delta) / delta]]) 
    
    Fc = np.array([Fcu, Fcv, Fch]).reshape(-1,1)
    Al = np.array([[d*sin(30*np.pi/180), d*cos(60*np.pi/180), -d],
    [- d*cos(30*np.pi/180), d*sin(60*np.pi/180), 0],
    [1, 1, 1]])

    # to contract model we apply pos force--> which is seen as negative in the gen coord space (force vec points upward)
    At = np.array([[-1.0, 0, 0],
    [0, -1.0, 0],
    [0, 0, -1.0]])

    A = np.matmul(At, np.matmul(Aq, Al))
    
    # A = np.float64(A)
    # print(f"Aq: {Aq * Al}\n")
    # print(f"A: {A}\n")
    Kp = np.diag([Kpb,Kpb,Kps])
    GG = G + C.dot(dq) + M.dot(ddqd) + K.dot(qd) + D.dot(dqd) -  Fc + Kp.dot((qd-q)) + KD*(dqd - dq)
    print(f"GG=: {GG}\n")
    print(f"Kpeq=: {(qd-q)}\n")
    GG = np.float64(GG)
    # print(f"This is tau_x, tau_y, Fz: {np.linalg.solve(np.matmul(At,Aq),GG)}\n")
    print(f"This is tau_x, tau_y, Fz: {np.linalg.solve(A,GG)}\n")

    tau = np.linalg.solve(A,GG)
    # print(f"this is tau: {tau}\n")
    return tau

# Calculates mass, coriolis, and gravity
def mass(q,dq,m,I,L0,d):

    I1 = I[0]
    I2 = I[1]
    I3 = I[2]


    dx = q[0][0]
    dy = q[1][0]
    dL = q[2][0]
    dx_dot = dq[0][0]
    dy_dot = dq[1][0]
    dL_dot = dq[2][0]
    delta = sqrt(dx**2 + dy**2)
    if delta < 10e-6:
        M = np.array([[I2/d**2 + (m*(L0 + dL)**2)/(4*d**2),                                0, 0],
                                            [0, I1/d**2 + (m*(L0 + dL)**2)/(4*d**2), 0],
                                            [0,                                0, m]])
        

        C = np.array([[ (dL_dot*m*(2*L0 + 2*dL))/(4*d**2),                                 0, (dx_dot*m*(2*L0 + 2*dL))/(4*d**2)],
                                            [0,  (dL_dot*m*(2*L0 + 2*dL))/(4*d**2), (dy_dot*m*(2*L0 + 2*dL))/(4*d**2)],
            [-(dx_dot*m*(2*L0 + 2*dL))/(4*d**2), -(dy_dot*m*(2*L0 + 2*dL))/(4*d**2),                                0]])

        G = np.array([0, 0, 1])
    else:
        M = np.array([[(I2*(dx**2 + d*dy*sin(delta/d)*(dy**2/delta**2)**(1/2))**2)/(d**2*delta**4) + (I1*(dx*(dy**2/delta**2)**(1/2)*(dx**2 + dy**2) - d*dx*dy*sin(delta/d))**2)/(d**2*delta**6) + (I3*dy**2*(cos(delta/d) - 1)**2)/delta**4 + (dx**2*m*(L0 + dL)**2*(delta - d*sin(delta/d))**2)/delta**6 + (d**2*m*(L0 + dL)**2*(cos(delta/d) - 1)**2*(dx**2 + delta*dy*(dy**2/delta**2)**(1/2))**2)/delta**8 + (d**2*dx**2*m*(L0 + dL)**2*(cos(delta/d) - 1)**2*(dy - delta*(dy**2/delta**2)**(1/2))**2)/delta**8,                                                                              (I1*(d*dx**2*sin(delta/d) + dy*(dy**2/delta**2)**(1/2)*(dx**2 + dy**2))*(dx*(dy**2/delta**2)**(1/2)*(dx**2 + dy**2) - d*dx*dy*sin(delta/d)))/(d**2*delta**6) - (I3*dx*dy*(cos(delta/d) - 1)**2)/delta**4 + (dx*dy*m*(L0 + dL)**2*(delta - d*sin(delta/d))**2)/delta**6 + (I2*dx*(dx**2 + d*dy*sin(delta/d)*(dy**2/delta**2)**(1/2))*(dy - d*sin(delta/d)*(dy**2/delta**2)**(1/2)))/(d**2*delta**4), (d*dx*m*(L0 + dL)*(2*d*cos(delta/d) - 2*d + delta*sin(delta/d)))/delta**4],
                                                                                    [(I1*(d*dx**2*sin(delta/d) + dy*(dy**2/delta**2)**(1/2)*(dx**2 + dy**2))*(dx*(dy**2/delta**2)**(1/2)*(dx**2 + dy**2) - d*dx*dy*sin(delta/d)))/(d**2*delta**6) - (I3*dx*dy*(cos(delta/d) - 1)**2)/delta**4 + (dx*dy*m*(L0 + dL)**2*(delta - d*sin(delta/d))**2)/delta**6 + (I2*dx*(dx**2 + d*dy*sin(delta/d)*(dy**2/delta**2)**(1/2))*(dy - d*sin(delta/d)*(dy**2/delta**2)**(1/2)))/(d**2*delta**4), (I1*(d*dx**2*sin(delta/d) + dy*(dy**2/delta**2)**(1/2)*(dx**2 + dy**2))**2)/(d**2*delta**6) + (I3*dx**2*(cos(delta/d) - 1)**2)/delta**4 + (I2*dx**2*(dy - d*sin(delta/d)*(dy**2/delta**2)**(1/2))**2)/(d**2*delta**4) + (dy**2*m*(L0 + dL)**2*(delta - d*sin(delta/d))**2)/delta**6 + (d**2*m*(L0 + dL)**2*(cos(delta/d) - 1)**2*(dx**2 + delta*dy*(dy**2/delta**2)**(1/2))**2)/delta**8 + (d**2*dx**2*m*(L0 + dL)**2*(cos(delta/d) - 1)**2*(dy - delta*(dy**2/delta**2)**(1/2))**2)/delta**8, (d*dy*m*(L0 + dL)*(2*d*cos(delta/d) - 2*d + delta*sin(delta/d)))/delta**4],
                                                                                                                                                                                                                                                                                                                                                                                    [(d*dx*m*(L0 + dL)*(2*d*cos(delta/d) - 2*d + delta*sin(delta/d)))/delta**4,                                                                                                                                                                                                                                                                                                                                                                             (d*dy*m*(L0 + dL)*(2*d*cos(delta/d) - 2*d + delta*sin(delta/d)))/delta**4,                                    -(2*d**2*m*(cos(delta/d) - 1))/delta**2]])
        
        
        C = np.arraydL_dot*((dx**2*m*(delta - d*sin(delta/d))**2*(2*L0 + 2*dL))/delta**6 + (d**2*m*(cos(delta/d) - 1)**2*(dx**2 + delta*dy*(dy**2/delta**2)**(1/2))**2*(2*L0 + 2*dL))/delta**8 + (d**2*dx**2*m*(cos(delta/d) - 1)**2*(dy - delta*(dy**2/delta**2)**(1/2))**2*(2*L0 + 2*dL))/delta**8) - dy_dot*((4*I3*dy**3*(cos(delta/d) - 1)**2)/delta**6 - (2*I3*dy*(cos(delta/d) - 1)**2)/delta**4 + (4*I2*dy*(dx**2 + d*dy*sin(delta/d)*(dy**2/delta**2)**(1/2))**2)/(d**2*delta**6) + (6*I1*dy*(dx*(dy**2/delta**2)**(1/2)*(dx**2 + dy**2) - d*dx*dy*sin(delta/d))**2)/(d**2*delta**8) + (6*dx**2*dy*m*(L0 + dL)**2*(delta - d*sin(delta/d))**2)/delta**8 + (2*I3*dy**3*sin(delta/d)*(cos(delta/d) - 1))/(d*delta**5) - (2*I2*(dx**2 + d*dy*sin(delta/d)*(dy**2/delta**2)**(1/2))*(delta*dy**4*cos(delta/d) + d*dy**4*sin(delta/d) + 2*d*dx**2*dy**2*sin(delta/d)))/(d**2*delta**8*(dy**2/delta**2)**(1/2)) - (2*I1*dx*(dx*(dy**2/delta**2)**(1/2)*(dx**2 + dy**2) - d*dx*dy*sin(delta/d))*(dx**2*dy + 2*dy**3 - delta*dy**2*cos(delta/d)*(dy**2/delta**2)**(1/2) - d*delta**2*sin(delta/d)*(dy**2/delta**2)**(1/2)))/(d**2*delta**8*(dy**2/delta**2)**(1/2)) + (8*d**2*dy*m*(L0 + dL)**2*(cos(delta/d) - 1)**2*(dx**2 + delta*dy*(dy**2/delta**2)**(1/2))**2)/delta**10 + (2*dx**2*dy*m*(L0 + dL)**2*(cos(delta/d) - 1)*(delta - d*sin(delta/d)))/delta**7 - (4*d**2*dy**2*m*(L0 + dL)**2*(cos(delta/d) - 1)**2*(dx**2 + delta*dy*(dy**2/delta**2)**(1/2)))/(delta**9*(dy**2/delta**2)**(1/2)) + (2*d**2*dx**2*m*(L0 + dL)**2*(cos(delta/d) - 1)**2*(dy - delta*(dy**2/delta**2)**(1/2))**2)/(delta**9*(dy**2/delta**2)**(1/2)) + (8*d**2*dx**2*dy*m*(L0 + dL)**2*(cos(delta/d) - 1)**2*(dy - delta*(dy**2/delta**2)**(1/2))**2)/delta**10 + (2*d*dy*m*sin(delta/d)*(L0 + dL)**2*(cos(delta/d) - 1)*(dx**2 + delta*dy*(dy**2/delta**2)**(1/2))**2)/delta**9 + (2*d*dx**2*dy*m*sin(delta/d)*(L0 + dL)**2*(cos(delta/d) - 1)*(dy - delta*(dy**2/delta**2)**(1/2))**2)/delta**9) - dx_dot*((4*I3*dx*dy**2*(cos(delta/d) - 1)**2)/delta**6 - (2*dx*m*(L0 + dL)**2*(delta - d*sin(delta/d))**2)/delta**6 + (4*I2*dx*(dx**2 + d*dy*sin(delta/d)*(dy**2/delta**2)**(1/2))**2)/(d**2*delta**6) + (6*dx**3*m*(L0 + dL)**2*(delta - d*sin(delta/d))**2)/delta**8 + (6*I1*dx*(dx*(dy**2/delta**2)**(1/2)*(dx**2 + dy**2) - d*dx*dy*sin(delta/d))**2)/(d**2*delta**8) + (2*dx**3*m*(L0 + dL)**2*(cos(delta/d) - 1)*(delta - d*sin(delta/d)))/delta**7 - (2*I2*dx*(dx**2 + d*dy*sin(delta/d)*(dy**2/delta**2)**(1/2))*(2*delta**4*(dy**2/delta**2)**(1/2) + delta*dy**3*cos(delta/d) - d*dy**3*sin(delta/d)))/(d**2*delta**8*(dy**2/delta**2)**(1/2)) + (8*d**2*dx**3*m*(L0 + dL)**2*(cos(delta/d) - 1)**2*(dy - delta*(dy**2/delta**2)**(1/2))**2)/delta**10 - (4*d**2*dx*m*(L0 + dL)**2*(cos(delta/d) - 1)**2*(dx**2 + delta*dy*(dy**2/delta**2)**(1/2)))/delta**8 + (2*I3*dx*dy**2*sin(delta/d)*(cos(delta/d) - 1))/(d*delta**5) + (8*d**2*dx*m*(L0 + dL)**2*(cos(delta/d) - 1)**2*(dx**2 + delta*dy*(dy**2/delta**2)**(1/2))**2)/delta**10 - (2*I1*dy*(dx*(dy**2/delta**2)**(1/2)*(dx**2 + dy**2) - d*dx*dy*sin(delta/d))*(2*dx**2*dy + dy**3 - delta*dx**2*cos(delta/d)*(dy**2/delta**2)**(1/2) - d*delta**2*sin(delta/d)*(dy**2/delta**2)**(1/2)))/(d**2*delta**8*(dy**2/delta**2)**(1/2)) - (2*d**2*dx*m*(L0 + dL)**2*(cos(delta/d) - 1)**2*(dy - delta*(dy**2/delta**2)**(1/2))**2)/delta**8 + (2*d*dx**3*m*sin(delta/d)*(L0 + dL)**2*(cos(delta/d) - 1)*(dy - delta*(dy**2/delta**2)**(1/2))**2)/delta**9 + (2*d*dx*m*sin(delta/d)*(L0 + dL)**2*(cos(delta/d) - 1)*(dx**2 + delta*dy*(dy**2/delta**2)**(1/2))**2)/delta**9), dy_dot*((4*I3*dx**3*(cos(delta/d) - 1)**2)/delta**6 - (4*I3*dx*(cos(delta/d) - 1)**2)/delta**4 + (4*I2*dx**3*(dy - d*sin(delta/d)*(dy**2/delta**2)**(1/2))**2)/(d**2*delta**6) + (8*I3*dx*dy**2*(cos(delta/d) - 1)**2)/delta**6 + (2*dx*m*(L0 + dL)**2*(delta - d*sin(delta/d))**2)/delta**6 - (2*I2*dx*(dy - d*sin(delta/d)*(dy**2/delta**2)**(1/2))**2)/(d**2*delta**4) + (6*I1*dx*(d*dx**2*sin(delta/d) + dy*(dy**2/delta**2)**(1/2)*(dx**2 + dy**2))**2)/(d**2*delta**8) - (6*dx*dy**2*m*(L0 + dL)**2*(delta - d*sin(delta/d))**2)/delta**8 + (2*I3*dx**3*sin(delta/d)*(cos(delta/d) - 1))/(d*delta**5) - (12*I1*dy*(d*dx**2*sin(delta/d) + dy*(dy**2/delta**2)**(1/2)*(dx**2 + dy**2))*(dx*(dy**2/delta**2)**(1/2)*(dx**2 + dy**2) - d*dx*dy*sin(delta/d)))/(d**2*delta**8) + (2*I1*dx*(d*dx**2*sin(delta/d) + dy*(dy**2/delta**2)**(1/2)*(dx**2 + dy**2))*(dx**2*dy + 2*dy**3 - delta*dy**2*cos(delta/d)*(dy**2/delta**2)**(1/2) - d*delta**2*sin(delta/d)*(dy**2/delta**2)**(1/2)))/(d**2*delta**8*(dy**2/delta**2)**(1/2)) + (2*I2*dx*(dy - d*sin(delta/d)*(dy**2/delta**2)**(1/2))*(delta*dy**4*cos(delta/d) + d*dy**4*sin(delta/d) + 2*d*dx**2*dy**2*sin(delta/d)))/(d**2*delta**8*(dy**2/delta**2)**(1/2)) - (8*I2*dx*dy*(dx**2 + d*dy*sin(delta/d)*(dy**2/delta**2)**(1/2))*(dy - d*sin(delta/d)*(dy**2/delta**2)**(1/2)))/(d**2*delta**6) - (2*I1*dx*(d*dx**2*sin(delta/d) + dy*(dy**2/delta**2)**(1/2)*(dx**2 + dy**2))*(dy**3 + delta*dx**2*cos(delta/d)*(dy**2/delta**2)**(1/2) + 2*d*delta**2*sin(delta/d)*(dy**2/delta**2)**(1/2)))/(d**2*delta**8*(dy**2/delta**2)**(1/2)) + (8*d**2*dx**3*m*(L0 + dL)**2*(cos(delta/d) - 1)**2*(dy - delta*(dy**2/delta**2)**(1/2))**2)/delta**10 - (4*d**2*dx*m*(L0 + dL)**2*(cos(delta/d) - 1)**2*(dx**2 + delta*dy*(dy**2/delta**2)**(1/2)))/delta**8 + (2*I1*dy*(dx*(dy**2/delta**2)**(1/2)*(dx**2 + dy**2) - d*dx*dy*sin(delta/d))*(2*dx**2*dy + 3*dy**3 + delta*dx**2*cos(delta/d)*(dy**2/delta**2)**(1/2)))/(d**2*delta**8*(dy**2/delta**2)**(1/2)) - (2*I2*dx*(dx**2 + d*dy*sin(delta/d)*(dy**2/delta**2)**(1/2))*(delta*dy**3*cos(delta/d) - delta**4*(dy**2/delta**2)**(1/2) + d*dx**2*dy*sin(delta/d)))/(d**2*delta**8*(dy**2/delta**2)**(1/2)) + (4*I3*dx*dy**2*sin(delta/d)*(cos(delta/d) - 1))/(d*delta**5) + (8*d**2*dx*m*(L0 + dL)**2*(cos(delta/d) - 1)**2*(dx**2 + delta*dy*(dy**2/delta**2)**(1/2))**2)/delta**10 - (2*dx*dy**2*m*(L0 + dL)**2*(cos(delta/d) - 1)*(delta - d*sin(delta/d)))/delta**7 - (2*d**2*dx*m*(L0 + dL)**2*(cos(delta/d) - 1)**2*(dy - delta*(dy**2/delta**2)**(1/2))**2)/delta**8 + (2*I2*dx**3*dy**2*(dy - d*sin(delta/d)*(dy**2/delta**2)**(1/2))*(delta*cos(delta/d) - d*sin(delta/d)))/(d**2*delta**8*(dy**2/delta**2)**(1/2)) + (2*d*dx**3*m*sin(delta/d)*(L0 + dL)**2*(cos(delta/d) - 1)*(dy - delta*(dy**2/delta**2)**(1/2))**2)/delta**9 + (2*d*dx*m*sin(delta/d)*(L0 + dL)**2*(cos(delta/d) - 1)*(dx**2 + delta*dy*(dy**2/delta**2)**(1/2))**2)/delta**9) - dx_dot*((4*I3*dy**3*(cos(delta/d) - 1)**2)/delta**6 - (2*I3*dy*(cos(delta/d) - 1)**2)/delta**4 + (4*I2*dy*(dx**2 + d*dy*sin(delta/d)*(dy**2/delta**2)**(1/2))**2)/(d**2*delta**6) + (6*I1*dy*(dx*(dy**2/delta**2)**(1/2)*(dx**2 + dy**2) - d*dx*dy*sin(delta/d))**2)/(d**2*delta**8) + (6*dx**2*dy*m*(L0 + dL)**2*(delta - d*sin(delta/d))**2)/delta**8 + (2*I3*dy**3*sin(delta/d)*(cos(delta/d) - 1))/(d*delta**5) - (2*I2*(dx**2 + d*dy*sin(delta/d)*(dy**2/delta**2)**(1/2))*(delta*dy**4*cos(delta/d) + d*dy**4*sin(delta/d) + 2*d*dx**2*dy**2*sin(delta/d)))/(d**2*delta**8*(dy**2/delta**2)**(1/2)) - (2*I1*dx*(dx*(dy**2/delta**2)**(1/2)*(dx**2 + dy**2) - d*dx*dy*sin(delta/d))*(dx**2*dy + 2*dy**3 - delta*dy**2*cos(delta/d)*(dy**2/delta**2)**(1/2) - d*delta**2*sin(delta/d)*(dy**2/delta**2)**(1/2)))/(d**2*delta**8*(dy**2/delta**2)**(1/2)) + (8*d**2*dy*m*(L0 + dL)**2*(cos(delta/d) - 1)**2*(dx**2 + delta*dy*(dy**2/delta**2)**(1/2))**2)/delta**10 + (2*dx**2*dy*m*(L0 + dL)**2*(cos(delta/d) - 1)*(delta - d*sin(delta/d)))/delta**7 - (4*d**2*dy**2*m*(L0 + dL)**2*(cos(delta/d) - 1)**2*(dx**2 + delta*dy*(dy**2/delta**2)**(1/2)))/(delta**9*(dy**2/delta**2)**(1/2)) + (2*d**2*dx**2*m*(L0 + dL)**2*(cos(delta/d) - 1)**2*(dy - delta*(dy**2/delta**2)**(1/2))**2)/(delta**9*(dy**2/delta**2)**(1/2)) + (8*d**2*dx**2*dy*m*(L0 + dL)**2*(cos(delta/d) - 1)**2*(dy - delta*(dy**2/delta**2)**(1/2))**2)/delta**10 + (2*d*dy*m*sin(delta/d)*(L0 + dL)**2*(cos(delta/d) - 1)*(dx**2 + delta*dy*(dy**2/delta**2)**(1/2))**2)/delta**9 + (2*d*dx**2*dy*m*sin(delta/d)*(L0 + dL)**2*(cos(delta/d) - 1)*(dy - delta*(dy**2/delta**2)**(1/2))**2)/delta**9) + (2*dL_dot*dx*dy*m*(L0 + dL)*(d**2*sin(delta/d)**2 + dx**2 + dy**2 - 2*d*delta*sin(delta/d)))/delta**6, dx_dot*((dx**2*m*(delta - d*sin(delta/d))**2*(2*L0 + 2*dL))/delta**6 + (d**2*m*(cos(delta/d) - 1)**2*(dx**2 + delta*dy*(dy**2/delta**2)**(1/2))**2*(2*L0 + 2*dL))/delta**8 + (d**2*dx**2*m*(cos(delta/d) - 1)**2*(dy - delta*(dy**2/delta**2)**(1/2))**2*(2*L0 + 2*dL))/delta**8) + (2*dx*dy*dy_dot*m*(L0 + dL)*(d**2*sin(delta/d)**2 + dx**2 + dy**2 - 2*d*delta*sin(delta/d)))/delta**6],
        [dx_dot*((4*I3*dy**3*(cos(delta/d) - 1)**2)/delta**6 - (4*I3*dy*(cos(delta/d) - 1)**2)/delta**4 + (8*I3*dx**2*dy*(cos(delta/d) - 1)**2)/delta**6 + (2*dy*m*(L0 + dL)**2*(delta - d*sin(delta/d))**2)/delta**6 + (4*I2*dy*(dx**2 + d*dy*sin(delta/d)*(dy**2/delta**2)**(1/2))**2)/(d**2*delta**6) + (2*I2*(dx**2 + d*dy*sin(delta/d)*(dy**2/delta**2)**(1/2))*(dy - d*sin(delta/d)*(dy**2/delta**2)**(1/2)))/(d**2*delta**4) + (6*I1*dy*(dx*(dy**2/delta**2)**(1/2)*(dx**2 + dy**2) - d*dx*dy*sin(delta/d))**2)/(d**2*delta**8) - (6*dx**2*dy*m*(L0 + dL)**2*(delta - d*sin(delta/d))**2)/delta**8 + (2*I3*dy**3*sin(delta/d)*(cos(delta/d) - 1))/(d*delta**5) - (12*I1*dx*(d*dx**2*sin(delta/d) + dy*(dy**2/delta**2)**(1/2)*(dx**2 + dy**2))*(dx*(dy**2/delta**2)**(1/2)*(dx**2 + dy**2) - d*dx*dy*sin(delta/d)))/(d**2*delta**8) - (8*I2*dx**2*(dx**2 + d*dy*sin(delta/d)*(dy**2/delta**2)**(1/2))*(dy - d*sin(delta/d)*(dy**2/delta**2)**(1/2)))/(d**2*delta**6) - (2*I2*(dx**2 + d*dy*sin(delta/d)*(dy**2/delta**2)**(1/2))*(delta*dy**4*cos(delta/d) + d*dy**4*sin(delta/d) + 2*d*dx**2*dy**2*sin(delta/d)))/(d**2*delta**8*(dy**2/delta**2)**(1/2)) - (2*I1*dx*(dx*(dy**2/delta**2)**(1/2)*(dx**2 + dy**2) - d*dx*dy*sin(delta/d))*(dx**2*dy + 2*dy**3 - delta*dy**2*cos(delta/d)*(dy**2/delta**2)**(1/2) - d*delta**2*sin(delta/d)*(dy**2/delta**2)**(1/2)))/(d**2*delta**8*(dy**2/delta**2)**(1/2)) + (2*I1*dx*(dx*(dy**2/delta**2)**(1/2)*(dx**2 + dy**2) - d*dx*dy*sin(delta/d))*(dy**3 + delta*dx**2*cos(delta/d)*(dy**2/delta**2)**(1/2) + 2*d*delta**2*sin(delta/d)*(dy**2/delta**2)**(1/2)))/(d**2*delta**8*(dy**2/delta**2)**(1/2)) + (4*I3*dx**2*dy*sin(delta/d)*(cos(delta/d) - 1))/(d*delta**5) + (2*I2*dx**2*(dy - d*sin(delta/d)*(dy**2/delta**2)**(1/2))*(2*delta**4*(dy**2/delta**2)**(1/2) + delta*dy**3*cos(delta/d) - d*dy**3*sin(delta/d)))/(d**2*delta**8*(dy**2/delta**2)**(1/2)) + (8*d**2*dy*m*(L0 + dL)**2*(cos(delta/d) - 1)**2*(dx**2 + delta*dy*(dy**2/delta**2)**(1/2))**2)/delta**10 + (2*I1*dy*(d*dx**2*sin(delta/d) + dy*(dy**2/delta**2)**(1/2)*(dx**2 + dy**2))*(2*dx**2*dy + dy**3 - delta*dx**2*cos(delta/d)*(dy**2/delta**2)**(1/2) - d*delta**2*sin(delta/d)*(dy**2/delta**2)**(1/2)))/(d**2*delta**8*(dy**2/delta**2)**(1/2)) - (2*dx**2*dy*m*(L0 + dL)**2*(cos(delta/d) - 1)*(delta - d*sin(delta/d)))/delta**7 - (4*d**2*dy**2*m*(L0 + dL)**2*(cos(delta/d) - 1)**2*(dx**2 + delta*dy*(dy**2/delta**2)**(1/2)))/(delta**9*(dy**2/delta**2)**(1/2)) - (2*I2*dx**2*dy**2*(dx**2 + d*dy*sin(delta/d)*(dy**2/delta**2)**(1/2))*(delta*cos(delta/d) - d*sin(delta/d)))/(d**2*delta**8*(dy**2/delta**2)**(1/2)) + (2*d**2*dx**2*m*(L0 + dL)**2*(cos(delta/d) - 1)**2*(dy - delta*(dy**2/delta**2)**(1/2))**2)/(delta**9*(dy**2/delta**2)**(1/2)) + (8*d**2*dx**2*dy*m*(L0 + dL)**2*(cos(delta/d) - 1)**2*(dy - delta*(dy**2/delta**2)**(1/2))**2)/delta**10 + (2*d*dy*m*sin(delta/d)*(L0 + dL)**2*(cos(delta/d) - 1)*(dx**2 + delta*dy*(dy**2/delta**2)**(1/2))**2)/delta**9 + (2*d*dx**2*dy*m*sin(delta/d)*(L0 + dL)**2*(cos(delta/d) - 1)*(dy - delta*(dy**2/delta**2)**(1/2))**2)/delta**9) - dy_dot*((4*I3*dx**3*(cos(delta/d) - 1)**2)/delta**6 - (2*I3*dx*(cos(delta/d) - 1)**2)/delta**4 + (4*I2*dx**3*(dy - d*sin(delta/d)*(dy**2/delta**2)**(1/2))**2)/(d**2*delta**6) - (2*I2*dx*(dy - d*sin(delta/d)*(dy**2/delta**2)**(1/2))**2)/(d**2*delta**4) + (6*I1*dx*(d*dx**2*sin(delta/d) + dy*(dy**2/delta**2)**(1/2)*(dx**2 + dy**2))**2)/(d**2*delta**8) + (6*dx*dy**2*m*(L0 + dL)**2*(delta - d*sin(delta/d))**2)/delta**8 + (2*I3*dx**3*sin(delta/d)*(cos(delta/d) - 1))/(d*delta**5) - (2*I1*dx*(d*dx**2*sin(delta/d) + dy*(dy**2/delta**2)**(1/2)*(dx**2 + dy**2))*(dy**3 + delta*dx**2*cos(delta/d)*(dy**2/delta**2)**(1/2) + 2*d*delta**2*sin(delta/d)*(dy**2/delta**2)**(1/2)))/(d**2*delta**8*(dy**2/delta**2)**(1/2)) + (8*d**2*dx**3*m*(L0 + dL)**2*(cos(delta/d) - 1)**2*(dy - delta*(dy**2/delta**2)**(1/2))**2)/delta**10 - (4*d**2*dx*m*(L0 + dL)**2*(cos(delta/d) - 1)**2*(dx**2 + delta*dy*(dy**2/delta**2)**(1/2)))/delta**8 + (8*d**2*dx*m*(L0 + dL)**2*(cos(delta/d) - 1)**2*(dx**2 + delta*dy*(dy**2/delta**2)**(1/2))**2)/delta**10 + (2*dx*dy**2*m*(L0 + dL)**2*(cos(delta/d) - 1)*(delta - d*sin(delta/d)))/delta**7 - (2*d**2*dx*m*(L0 + dL)**2*(cos(delta/d) - 1)**2*(dy - delta*(dy**2/delta**2)**(1/2))**2)/delta**8 + (2*I2*dx**3*dy**2*(dy - d*sin(delta/d)*(dy**2/delta**2)**(1/2))*(delta*cos(delta/d) - d*sin(delta/d)))/(d**2*delta**8*(dy**2/delta**2)**(1/2)) + (2*d*dx**3*m*sin(delta/d)*(L0 + dL)**2*(cos(delta/d) - 1)*(dy - delta*(dy**2/delta**2)**(1/2))**2)/delta**9 + (2*d*dx*m*sin(delta/d)*(L0 + dL)**2*(cos(delta/d) - 1)*(dx**2 + delta*dy*(dy**2/delta**2)**(1/2))**2)/delta**9) + (2*dL_dot*dx*dy*m*(L0 + dL)*(d**2*sin(delta/d)**2 + dx**2 + dy**2 - 2*d*delta*sin(delta/d)))/deltadL_dot*((dy**2*m*(delta - d*sin(delta/d))**2*(2*L0 + 2*dL))/delta**6 + (d**2*m*(cos(delta/d) - 1)**2*(dx**2 + delta*dy*(dy**2/delta**2)**(1/2))**2*(2*L0 + 2*dL))/delta**8 + (d**2*dx**2*m*(cos(delta/d) - 1)**2*(dy - delta*(dy**2/delta**2)**(1/2))**2*(2*L0 + 2*dL))/delta**8) - dy_dot*((4*I3*dx**2*dy*(cos(delta/d) - 1)**2)/delta**6 - (2*dy*m*(L0 + dL)**2*(delta - d*sin(delta/d))**2)/delta**6 + (6*dy**3*m*(L0 + dL)**2*(delta - d*sin(delta/d))**2)/delta**8 + (6*I1*dy*(d*dx**2*sin(delta/d) + dy*(dy**2/delta**2)**(1/2)*(dx**2 + dy**2))**2)/(d**2*delta**8) + (4*I2*dx**2*dy*(dy - d*sin(delta/d)*(dy**2/delta**2)**(1/2))**2)/(d**2*delta**6) + (2*dy**3*m*(L0 + dL)**2*(cos(delta/d) - 1)*(delta - d*sin(delta/d)))/delta**7 + (2*I2*dx**2*(dy - d*sin(delta/d)*(dy**2/delta**2)**(1/2))*(delta*dy**3*cos(delta/d) - delta**4*(dy**2/delta**2)**(1/2) + d*dx**2*dy*sin(delta/d)))/(d**2*delta**8*(dy**2/delta**2)**(1/2)) - (2*I1*dy*(d*dx**2*sin(delta/d) + dy*(dy**2/delta**2)**(1/2)*(dx**2 + dy**2))*(2*dx**2*dy + 3*dy**3 + delta*dx**2*cos(delta/d)*(dy**2/delta**2)**(1/2)))/(d**2*delta**8*(dy**2/delta**2)**(1/2)) + (2*I3*dx**2*dy*sin(delta/d)*(cos(delta/d) - 1))/(d*delta**5) + (8*d**2*dy*m*(L0 + dL)**2*(cos(delta/d) - 1)**2*(dx**2 + delta*dy*(dy**2/delta**2)**(1/2))**2)/delta**10 - (4*d**2*dy**2*m*(L0 + dL)**2*(cos(delta/d) - 1)**2*(dx**2 + delta*dy*(dy**2/delta**2)**(1/2)))/(delta**9*(dy**2/delta**2)**(1/2)) + (2*d**2*dx**2*m*(L0 + dL)**2*(cos(delta/d) - 1)**2*(dy - delta*(dy**2/delta**2)**(1/2))**2)/(delta**9*(dy**2/delta**2)**(1/2)) + (8*d**2*dx**2*dy*m*(L0 + dL)**2*(cos(delta/d) - 1)**2*(dy - delta*(dy**2/delta**2)**(1/2))**2)/delta**10 + (2*d*dy*m*sin(delta/d)*(L0 + dL)**2*(cos(delta/d) - 1)*(dx**2 + delta*dy*(dy**2/delta**2)**(1/2))**2)/delta**9 + (2*d*dx**2*dy*m*sin(delta/d)*(L0 + dL)**2*(cos(delta/d) - 1)*(dy - delta*(dy**2/delta**2)**(1/2))**2)/delta**9) - dx_dot*((4*I3*dx**3*(cos(delta/d) - 1)**2)/delta**6 - (2*I3*dx*(cos(delta/d) - 1)**2)/delta**4 + (4*I2*dx**3*(dy - d*sin(delta/d)*(dy**2/delta**2)**(1/2))**2)/(d**2*delta**6) - (2*I2*dx*(dy - d*sin(delta/d)*(dy**2/delta**2)**(1/2))**2)/(d**2*delta**4) + (6*I1*dx*(d*dx**2*sin(delta/d) + dy*(dy**2/delta**2)**(1/2)*(dx**2 + dy**2))**2)/(d**2*delta**8) + (6*dx*dy**2*m*(L0 + dL)**2*(delta - d*sin(delta/d))**2)/delta**8 + (2*I3*dx**3*sin(delta/d)*(cos(delta/d) - 1))/(d*delta**5) - (2*I1*dx*(d*dx**2*sin(delta/d) + dy*(dy**2/delta**2)**(1/2)*(dx**2 + dy**2))*(dy**3 + delta*dx**2*cos(delta/d)*(dy**2/delta**2)**(1/2) + 2*d*delta**2*sin(delta/d)*(dy**2/delta**2)**(1/2)))/(d**2*delta**8*(dy**2/delta**2)**(1/2)) + (8*d**2*dx**3*m*(L0 + dL)**2*(cos(delta/d) - 1)**2*(dy - delta*(dy**2/delta**2)**(1/2))**2)/delta**10 - (4*d**2*dx*m*(L0 + dL)**2*(cos(delta/d) - 1)**2*(dx**2 + delta*dy*(dy**2/delta**2)**(1/2)))/delta**8 + (8*d**2*dx*m*(L0 + dL)**2*(cos(delta/d) - 1)**2*(dx**2 + delta*dy*(dy**2/delta**2)**(1/2))**2)/delta**10 + (2*dx*dy**2*m*(L0 + dL)**2*(cos(delta/d) - 1)*(delta - d*sin(delta/d)))/delta**7 - (2*d**2*dx*m*(L0 + dL)**2*(cos(delta/d) - 1)**2*(dy - delta*(dy**2/delta**2)**(1/2))**2)/delta**8 + (2*I2*dx**3*dy**2*(dy - d*sin(delta/d)*(dy**2/delta**2)**(1/2))*(delta*cos(delta/d) - d*sin(delta/d)))/(d**2*delta**8*(dy**2/delta**2)**(1/2)) + (2*d*dx**3*m*sin(delta/d)*(L0 + dL)**2*(cos(delta/d) - 1)*(dy - delta*(dy**2/delta**2)**(1/2))**2)/delta**9 + (2*d*dx*m*sin(delta/d)*(L0 + dL)**2*(cos(delta/d) - 1)*(dx**2 + delta*dy*(dy**2/delta**2)**(1/2))**2)/delta**9), dy_dot*((dy**2*m*(delta - d*sin(delta/d))**2*(2*L0 + 2*dL))/delta**6 + (d**2*m*(cos(delta/d) - 1)**2*(dx**2 + delta*dy*(dy**2/delta**2)**(1/2))**2*(2*L0 + 2*dL))/delta**8 + (d**2*dx**2*m*(cos(delta/d) - 1)**2*(dy - delta*(dy**2/delta**2)**(1/2))**2*(2*L0 + 2*dL))/delta**8) + (2*dx*dx_dot*dy*m*(L0 + dL)*(d**2*sin(delta/d)**2 + dx**2 + dy**2 - 2*d*delta*sin(delta/d)))/delta**6],
dL_dot*((4*d**2*dx*m*(cos(delta/d) - 1))/delta**4 + (2*d*dx*m*sin(delta/d))/delta**3) - dx_dot*((dx**2*m*(delta - d*sin(delta/d))**2*(2*L0 + 2*dL))/delta**6 - (2*dx**2*m*(L0 + dL)*(delta*cos(delta/d) - d*sin(delta/d)))/delta**5 - (2*d*m*(L0 + dL)*(2*d*cos(delta/d) - 2*d + delta*sin(delta/d)))/delta**4 + (8*d*dx**2*m*(L0 + dL)*(2*d*cos(delta/d) - 2*d + delta*sin(delta/d)))/delta**6 + (d**2*m*(cos(delta/d) - 1)**2*(dx**2 + delta*dy*(dy**2/delta**2)**(1/2))**2*(2*L0 + 2*dL))/delta**8 + (d**2*dx**2*m*(cos(delta/d) - 1)**2*(dy - delta*(dy**2/delta**2)**(1/2))**2*(2*L0 + 2*dL))/delta**8) - (2*dx*dy*dy_dot*m*(L0 + dL)*(8*d**2*cos(delta/d) - dx**2*cos(delta/d) - dy**2*cos(delta/d) + d**2*sin(delta/d)**2 - 8*d**2 + dx**2 + dy**2 + 3*d*delta*sin(delta/d)))/deltadL_dot*((4*d**2*dy*m*(cos(delta/d) - 1))/delta**4 + (2*d*dy*m*sin(delta/d))/delta**3) - dy_dot*((dy**2*m*(delta - d*sin(delta/d))**2*(2*L0 + 2*dL))/delta**6 - (2*dy**2*m*(L0 + dL)*(delta*cos(delta/d) - d*sin(delta/d)))/delta**5 - (2*d*m*(L0 + dL)*(2*d*cos(delta/d) - 2*d + delta*sin(delta/d)))/delta**4 + (8*d*dy**2*m*(L0 + dL)*(2*d*cos(delta/d) - 2*d + delta*sin(delta/d)))/delta**6 + (d**2*m*(cos(delta/d) - 1)**2*(dx**2 + delta*dy*(dy**2/delta**2)**(1/2))**2*(2*L0 + 2*dL))/delta**8 + (d**2*dx**2*m*(cos(delta/d) - 1)**2*(dy - delta*(dy**2/delta**2)**(1/2))**2*(2*L0 + 2*dL))/delta**8) - (2*dx*dx_dot*dy*m*(L0 + dL)*(8*d**2*cos(delta/d) - dx**2*cos(delta/d) - dy**2*cos(delta/d) + d**2*sin(delta/d)**2 - 8*d**2 + dx**2 + dy**2 + 3*d*delta*sin(delta/d)))/delta**6,                                                                                                                                                                                                                                                                             (2*d*m*(dx*dx_dot + dy*dy_dot)*(2*d*cos(delta/d) - 2*d + delta*sin(delta/d)))/delta**4]])


        G_x = (dx*cos(delta/d)*(L0 + dL))/delta**2 - (d*dx*sin(delta/d)*(L0 + dL))/delta**3
        G_y = (dy*cos(delta/d)*(L0 + dL))/delta**2 - (d*dy*sin(delta/d)*(L0 + dL))/delta**3
        G_L = (d*sin(delta/d))/delta
        G = np.array([G_x, G_y, G_L])

    return [M, C, G]


# zero =  np.array([0, 0, 0]).reshape(-1,1)
# qd = np.array([0, 0, -0.02]).reshape(-1,1)
# puppet_controller(zero, zero, qd, zero, zero, 0.043, 0.007, 0.015, 0.075)